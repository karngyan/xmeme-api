/*
 * X Meme API
 * Submission for Crio Winter of Doing Stage 2B
 *
 * OpenAPI spec version: 1.0.0
 * Contact: karngyan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ModelsIResponse', 'model/ModelsMeme'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ModelsIResponse'), require('../model/ModelsMeme'));
  } else {
    // Browser globals (root is window)
    if (!root.XMemeApi) {
      root.XMemeApi = {};
    }
    root.XMemeApi.MemesApi = factory(root.XMemeApi.ApiClient, root.XMemeApi.ModelsIResponse, root.XMemeApi.ModelsMeme);
  }
}(this, function(ApiClient, ModelsIResponse, ModelsMeme) {
  'use strict';

  /**
   * Memes service.
   * @module api/MemesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MemesApi. 
   * @alias module:api/MemesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the memeControllerCreateMeme operation.
     * @callback module:api/MemesApi~memeControllerCreateMemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsIResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create New XMeme
     * @param {String} name name of the owner
     * @param {String} url url of the meme
     * @param {String} caption caption of the meme
     * @param {module:api/MemesApi~memeControllerCreateMemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsIResponse}
     */
    this.memeControllerCreateMeme = function(name, url, caption, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling memeControllerCreateMeme");
      }

      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling memeControllerCreateMeme");
      }

      // verify the required parameter 'caption' is set
      if (caption === undefined || caption === null) {
        throw new Error("Missing the required parameter 'caption' when calling memeControllerCreateMeme");
      }


      var pathParams = {
      };
      var queryParams = {
        'name': name,
        'url': url,
        'caption': caption,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = ModelsIResponse;

      return this.apiClient.callApi(
        '/memes/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the memeControllerGetAllMemes operation.
     * @callback module:api/MemesApi~memeControllerGetAllMemesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsMeme>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Latest 100 Memes (later can be paginated)
     * @param {module:api/MemesApi~memeControllerGetAllMemesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsMeme>}
     */
    this.memeControllerGetAllMemes = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = [ModelsMeme];

      return this.apiClient.callApi(
        '/memes/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the memeControllerGetMeme operation.
     * @callback module:api/MemesApi~memeControllerGetMemeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsMeme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Meme by Id
     * @param {Number} mid the mid you want to get
     * @param {module:api/MemesApi~memeControllerGetMemeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsMeme}
     */
    this.memeControllerGetMeme = function(mid, callback) {
      var postBody = null;

      // verify the required parameter 'mid' is set
      if (mid === undefined || mid === null) {
        throw new Error("Missing the required parameter 'mid' when calling memeControllerGetMeme");
      }


      var pathParams = {
        'mid': mid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = ModelsMeme;

      return this.apiClient.callApi(
        '/memes/{mid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
