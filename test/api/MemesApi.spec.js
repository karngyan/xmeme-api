/*
 * X Meme API
 * Submission for Crio Winter of Doing Stage 2B
 *
 * OpenAPI spec version: 1.0.0
 * Contact: karngyan@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.XMemeApi);
  }
}(this, function(expect, XMemeApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new XMemeApi.MemesApi();
  });

  describe('(package)', function() {
    describe('MemesApi', function() {
      describe('memeControllerCreateMeme', function() {
        it('should call memeControllerCreateMeme successfully', function(done) {
          // TODO: uncomment, update parameter values for memeControllerCreateMeme call and complete the assertions
          /*
          var name = "name_example";
          var url = "url_example";
          var caption = "caption_example";

          instance.memeControllerCreateMeme(name, url, caption, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XMemeApi.ModelsIResponse);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memeControllerGetAllMemes', function() {
        it('should call memeControllerGetAllMemes successfully', function(done) {
          // TODO: uncomment memeControllerGetAllMemes call and complete the assertions
          /*

          instance.memeControllerGetAllMemes(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(XMemeApi.ModelsMeme);
              expect(data.caption).to.be.a('string');
              expect(data.caption).to.be("");
              expect(data.created).to.be.a('number');
              expect(data.created).to.be("0");
              expect(data.id).to.be.a('number');
              expect(data.id).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.updated).to.be.a('number');
              expect(data.updated).to.be("0");
              expect(data.url).to.be.a('string');
              expect(data.url).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('memeControllerGetMeme', function() {
        it('should call memeControllerGetMeme successfully', function(done) {
          // TODO: uncomment, update parameter values for memeControllerGetMeme call and complete the assertions
          /*
          var mid = 789;

          instance.memeControllerGetMeme(mid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(XMemeApi.ModelsMeme);
            expect(data.caption).to.be.a('string');
            expect(data.caption).to.be("");
            expect(data.created).to.be.a('number');
            expect(data.created).to.be("0");
            expect(data.id).to.be.a('number');
            expect(data.id).to.be("0");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.updated).to.be.a('number');
            expect(data.updated).to.be("0");
            expect(data.url).to.be.a('string');
            expect(data.url).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
